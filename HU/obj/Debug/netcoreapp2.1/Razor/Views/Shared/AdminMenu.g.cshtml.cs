#pragma checksum "C:\Users\Oksana\source\repos\HU\HU\Views\Shared\AdminMenu.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2cc57372755112551be7d98c384c7ea29ddf961c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared_AdminMenu), @"mvc.1.0.view", @"/Views/Shared/AdminMenu.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/AdminMenu.cshtml", typeof(AspNetCore.Views_Shared_AdminMenu))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2cc57372755112551be7d98c384c7ea29ddf961c", @"/Views/Shared/AdminMenu.cshtml")]
    public class Views_Shared_AdminMenu : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 25, true);
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            EndContext();
            BeginContext(25, 1258, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "37bcab6f515241a78645e7943cabb921", async() => {
                BeginContext(31, 501, true);
                WriteLiteral(@"      
<nav class=""navbar navbar-inverse navbar-static-top"" role=""navigation"" style=""background-color: #014c8c; border-color: #014c8c"" >
    <div class=""container"">
      
        <div class=""navbar-header"">
            <button type=""button"" class=""navbar-toggle"" data-toggle=""collapse"" data-target="".nav-collapse"">
                <span class=""icon-bar""></span>
                <span class=""icon-bar""></span>
                <span class=""icon-bar""></span>
            </button>
            ");
                EndContext();
                BeginContext(533, 115, false);
#line 13 "C:\Users\Oksana\source\repos\HU\HU\Views\Shared\AdminMenu.cshtml"
       Write(Html.ActionLink("Історія Університету", "PostsByPeriod", "Lnu", new { area = "" }, new { @class = "navbar-brand" }));

#line default
#line hidden
                EndContext();
                BeginContext(648, 139, true);
                WriteLiteral("\r\n        </div>\r\n          \r\n        <div class=\"collapse navbar-collapse\">\r\n            <ul class=\"nav navbar-nav\">\r\n                <li>");
                EndContext();
                BeginContext(788, 47, false);
#line 18 "C:\Users\Oksana\source\repos\HU\HU\Views\Shared\AdminMenu.cshtml"
               Write(Html.ActionLink("Пости", "AdminPosts", "Admin"));

#line default
#line hidden
                EndContext();
                BeginContext(835, 27, true);
                WriteLiteral("</li>\r\n                <li>");
                EndContext();
                BeginContext(863, 52, false);
#line 19 "C:\Users\Oksana\source\repos\HU\HU\Views\Shared\AdminMenu.cshtml"
               Write(Html.ActionLink("Події", "AdminEventTypes", "Admin"));

#line default
#line hidden
                EndContext();
                BeginContext(915, 27, true);
                WriteLiteral("</li>\r\n                <li>");
                EndContext();
                BeginContext(943, 55, false);
#line 20 "C:\Users\Oksana\source\repos\HU\HU\Views\Shared\AdminMenu.cshtml"
               Write(Html.ActionLink("Постаті", "AdminFigureTypes", "Admin"));

#line default
#line hidden
                EndContext();
                BeginContext(998, 134, true);
                WriteLiteral("</li>\r\n            </ul>\r\n          \r\n            <ul class=\"nav navbar-nav navbar-right\">\r\n                <li>\r\n                    ");
                EndContext();
                BeginContext(1133, 43, false);
#line 25 "C:\Users\Oksana\source\repos\HU\HU\Views\Shared\AdminMenu.cshtml"
               Write(Html.ActionLink("Вихід", "LogOut", "Admin"));

#line default
#line hidden
                EndContext();
                BeginContext(1176, 100, true);
                WriteLiteral("\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n    </div>\r\n</nav>          \r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1283, 45096, true);
            WriteLiteral(@"
</html>

<style>
    /*!
    * Mvc.Grid 4.0.2
    * https://github.com/NonFactors/MVC6.Grid
    *
    * Copyright © NonFactors
    *
    * Licensed under the terms of the MIT License
    * http://www.opensource.org/licenses/mit-license.php
    */

    .table-cell {
        height: 70px;
        font-size: 12px;
    }


    .mvc-grid {
        line-height: 1.25em;
        position: relative;
        overflow-x: auto;
        font-size: 1rem;
    }

        .mvc-grid table {
            border-collapse: collapse;
            max-width: 100%;
            width: 100%;
        }

        .mvc-grid th {
            background-clip: padding-box;
            background-color: #d9edf7;
            position: relative;
        }

        .mvc-grid th,
        .mvc-grid td {
            border: 1px solid #dee2e6;
            padding: 0.75em;
        }

        .mvc-grid .filterable {
            padding-right: 3.5em;
        }

        .mvc-grid .sortable,
        .mvc-g");
            WriteLiteral(@"rid .mvc-grid-filter {
            cursor: pointer;
        }

        .mvc-grid .asc::after {
            padding-left: 3px;
            content: '\2193';
        }

        .mvc-grid .desc::after {
            padding-left: 3px;
            content: '\2191';
        }

    .mvc-grid-hidden,
    .mvc-grid-options {
        display: none;
    }

    .mvc-grid-filter {
        background-color: rgba(0, 0, 0, 0.03);
        transition: background-color 0.5s;
        font-family: 'GridGlyphs';
        position: absolute;
        font-weight: bold;
        width: 2.75em;
        border: none;
        height: 100%;
        right: 0;
        top: 0;
    }

        .mvc-grid-filter:focus,
        .mvc-grid-filter:hover {
            background-color: rgba(0, 0, 0, 0.06);
            color: inherit;
        }

        .mvc-grid-filter::before {
            content: '\0041';
        }

        .mvc-grid-filter.applied::before {
            content: '\0042';
        }

    ");
            WriteLiteral(@".mvc-grid-row-filters .filterable {
        padding: 0.25em;
    }

    .mvc-grid-row-filters th div {
        display: flex;
    }

    .mvc-grid-row-filters .mvc-grid-value {
        border: 0.5px solid #aaaaaa;
        margin-right: 0.25em;
        padding: 0 0.2em;
        font: inherit;
        flex: 1;
    }

    .mvc-grid-row-filters input.mvc-grid-value {
        padding: 0 0.5em;
    }

    .mvc-grid-row-filters .mvc-grid-value.invalid {
        outline-color: #dc3545;
    }

    .mvc-grid-row-filters .mvc-grid-value:-ms-input-placeholder {
        color: #bbbbbb;
    }

    .mvc-grid-row-filters .mvc-grid-filter {
        border: 0.5px solid #aaaaaa;
        flex: 0 0 2.125em;
        position: static;
        height: 2.125em;
    }

    .mvc-grid-row-filters [readonly] {
        background-color: #e4e4e4;
    }

    .mvc-grid-row-filters.mvc-grid-headers .filterable {
        padding: 0;
    }

    .mvc-grid-row-filters.mvc-grid-headers .mvc-grid-value {
");
            WriteLiteral(@"        padding: 0.75em 3.5em 0.75em 0.75em;
        background-color: #f7f7f7;
        border: none;
        margin: 0;
    }

    .mvc-grid-row-filters.mvc-grid-headers .mvc-grid-filter {
        position: absolute;
        border: none;
        height: 100%;
    }

    .mvc-grid-popup {
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.176);
        background-clip: padding-box;
        background-color: #ffffff;
        border: 1px solid #cccccc;
        border-radius: 4px;
        position: absolute;
        min-width: 12em;
        font-size: 1rem;
        z-index: 1100;
    }

        .mvc-grid-popup.mvc-grid-guid-filter {
            min-width: 20em;
        }

        .mvc-grid-popup .popup-arrow {
            border-right: 7px solid transparent;
            border-left: 7px solid transparent;
            border-bottom: 8px solid #ffffff;
            box-sizing: border-box;
            position: absolute;
            height: 9px;
            top: -8px;
        }

  ");
            WriteLiteral(@"          .mvc-grid-popup .popup-arrow::after {
                border-right: 8px solid transparent;
                border-left: 8px solid transparent;
                border-bottom: 9px solid #cccccc;
                position: absolute;
                content: "" "";
                z-index: -1;
                left: -8px;
                top: -1px;
            }

        .mvc-grid-popup .popup-content {
            padding: 0.5em;
        }

        .mvc-grid-popup .popup-group {
            padding: 0.2em;
        }

        .mvc-grid-popup .popup-operator {
            text-align: center;
        }

        .mvc-grid-popup .popup-actions {
            padding: 0.4em 0 0.2em;
            text-align: center;
        }

        .mvc-grid-popup .mvc-grid-value,
        .mvc-grid-popup .mvc-grid-method,
        .mvc-grid-popup .mvc-grid-operator {
            border: 1px solid #cccccc;
            box-sizing: border-box;
            font-size: 0.9em;
            padding: 0 0.2");
            WriteLiteral(@"em;
            height: 2.5em;
            width: 100%;
        }

        .mvc-grid-popup .mvc-grid-operator {
            width: auto;
        }

        .mvc-grid-popup input.mvc-grid-value {
            padding: 0 0.5em;
        }

        .mvc-grid-popup .mvc-grid-value.invalid {
            outline-color: #dc3545;
        }

        .mvc-grid-popup .mvc-grid-apply,
        .mvc-grid-popup .mvc-grid-cancel {
            border: 1px solid #ffffff;
            padding: 0.25em;
            cursor: pointer;
            min-width: 4em;
            color: #ffffff;
            outline: 0;
        }

        .mvc-grid-popup .mvc-grid-apply {
            background-color: #28a745;
            border-color: #28a745;
            margin-right: 0.3em;
        }

            .mvc-grid-popup .mvc-grid-apply:focus {
                box-shadow: 0 0 0 0.2em rgba(40, 167, 69, 0.5);
            }

        .mvc-grid-popup .mvc-grid-cancel {
            background-color: #dc3545;
       ");
            WriteLiteral(@"     border-color: #dc3545;
            margin-left: 0.3em;
        }

            .mvc-grid-popup .mvc-grid-cancel:focus {
                box-shadow: 0 0 0 0.2em rgba(220, 53, 69, 0.5);
            }

    .mvc-grid-pager,
    .mvc-grid-empty-row {
        text-align: center;
    }

        .mvc-grid-pager button {
            background-color: #ffffff;
            border: 1px solid #dddddd;
            box-sizing: content-box;
            line-height: 2.5em;
            padding: 0 0.25em;
            cursor: pointer;
            margin: 0.5em 0;
            min-width: 2em;
            color: #337ab7;
        }

            .mvc-grid-pager button:focus,
            .mvc-grid-pager button:hover {
                background-color: #f7f7f7;
                color: #014c8c;
            }

        .mvc-grid-pager .active,
        .mvc-grid-pager .active:focus,
        .mvc-grid-pager .active:hover {
            background-color: #0275d8;
            border-color: #0275d8;
      ");
            WriteLiteral(@"      color: #ffffff;
        }

        .mvc-grid-pager .disabled,
        .mvc-grid-pager .disabled:focus,
        .mvc-grid-pager .disabled:hover {
            background-color: #efefef;
            cursor: not-allowed;
            color: #777777;
            outline: none;
        }

    .mvc-grid-page-sizes {
        display: inline-block;
        margin-left: 0.5em;
    }

        .mvc-grid-page-sizes select {
            border: 1px solid #dddddd;
            padding: 0.5em 0;
            font: inherit;
        }

        .mvc-grid-page-sizes input {
            border: 1px solid #dddddd;
            box-sizing: content-box;
            text-align: center;
            padding: 0 0.25em;
            height: 2.5em;
            width: 2.5em;
        }

    .mvc-grid-loader {
        background-color: rgba(0, 0, 0, 0.3);
        justify-content: center;
        transition: opacity 1s;
        align-items: center;
        position: absolute;
        display: flex;
    ");
            WriteLiteral(@"    z-index: 100;
        height: 100%;
        cursor: wait;
        width: 100%;
        opacity: 0;
        left: 0;
        top: 0;
    }

    .mvc-grid-loading {
        opacity: 1;
    }

        .mvc-grid-loading > div > div {
            animation: loader-points 1.4s infinite ease-in-out both;
            background-color: #f5f5f5;
            display: inline-block;
            border-radius: 100%;
            margin: 0 0.75em;
            height: 1.5em;
            width: 1.5em;
        }

            .mvc-grid-loading > div > div:nth-child(1) {
                animation-delay: -0.32s;
            }

            .mvc-grid-loading > div > div:nth-child(2) {
                animation-delay: -0.16s;
            }
</style>


<script>
    /*!
 * Mvc.Grid 4.0.2
 * https://github.com/NonFactors/MVC6.Grid
 *
 * Copyright © NonFactors
 *
 * Licensed under the terms of the MIT License
 * http://www.opensource.org/licenses/mit-license.php
 */
    var MvcGrid = (functio");
            WriteLiteral(@"n () {
        function MvcGrid(element, options) {
            var grid = this;
            options = options || {};
            element = grid.findGrid(element);
            if (element.dataset.id) {
                return grid.instances[parseInt(element.dataset.id)].set(options);
            }

            grid.columns = [];
            grid.element = element;
            grid.loadingDelay = 300;
            grid.requestType = 'get';
            grid.name = element.dataset.name;
            grid.popup = new MvcGridPopup(grid);
            grid.filterMode = element.dataset.filterMode;
            grid.prefix = grid.name ? grid.name + '-' : '';
            grid.sourceUrl = grid.element.dataset.sourceUrl;
            grid.element.dataset.id = options.id || grid.instances.length;
            grid.filters = {
                'enum': MvcGridEnumFilter,
                'date': MvcGridDateFilter,
                'guid': MvcGridGuidFilter,
                'text': MvcGridTextFilter,
         ");
            WriteLiteral(@"       'number': MvcGridNumberFilter,
                'boolean': MvcGridBooleanFilter
            };

            var rowFilters = element.querySelectorAll('.mvc-grid-row-filters th');
            [].forEach.call(element.querySelectorAll('.mvc-grid-headers th'), function (header, i) {
                grid.columns.push(new MvcGridColumn(grid, header, rowFilters[i]));
            });

            var pager = element.querySelector('.mvc-grid-pager');
            if (pager) {
                grid.pager = new MvcGridPager(grid, pager);
            }

            if (options.id) {
                grid.instances[parseInt(options.id)] = grid;
            } else {
                grid.instances.push(grid);
            }

            grid.set(options);
            grid.cleanUp();
            grid.bind();

            if (grid.sourceUrl && !element.children.length) {
                grid.reload();
            }
        }

        MvcGrid.prototype = {
            instances: [],
           ");
            WriteLiteral(@" lang: {
                text: {
                    'contains': 'Contains',
                    'equals': 'Equals',
                    'not-equals': 'Not equals',
                    'starts-with': 'Starts with',
                    'ends-with': 'Ends with'
                },
                number: {
                    'equals': 'Equals',
                    'not-equals': 'Not equals',
                    'less-than': 'Less than',
                    'greater-than': 'Greater than',
                    'less-than-or-equal': 'Less than or equal',
                    'greater-than-or-equal': 'Greater than or equal'
                },
                date: {
                    'equals': 'Equals',
                    'not-equals': 'Not equals',
                    'earlier-than': 'Earlier than',
                    'later-than': 'Later than',
                    'earlier-than-or-equal': 'Earlier than or equal',
                    'later-than-or-equal': 'Later than or equal'
           ");
            WriteLiteral(@"     },
                enum: {
                    'equals': 'Equals',
                    'not-equals': 'Not equals'
                },
                guid: {
                    'equals': 'Equals',
                    'not-equals': 'Not equals'
                },
                boolean: {
                    'equals': 'Equals',
                    'not-equals': 'Not equals'
                },
                filter: {
                    'apply': '&#10004;',
                    'remove': '&#10008;'
                },
                operator: {
                    'select': '',
                    'and': 'and',
                    'or': 'or'
                }
            },

            findGrid: function (element) {
                var grid = element;

                if (!grid) {
                    throw new Error('Grid element was not specified.');
                }

                while (grid && !grid.classList.contains('mvc-grid')) {
                    grid = grid.");
            WriteLiteral(@"parentElement;
                }

                if (!grid) {
                    throw new Error('Grid can only be created from within mvc-grid structure.');
                }

                return grid;
            },

            set: function (options) {
                var grid = this;
                var filters = options.filters || {};

                for (var key in filters) {
                    grid.filters[key] = filters[key];
                }

                grid.columns.forEach(function (column) {
                    if (column.filter && grid.filters[column.filter.name]) {
                        column.filter.instance = new grid.filters[column.filter.name](column);
                        column.filter.instance.init();
                    }
                });

                grid.requestType = options.requestType || grid.requestType;
                grid.sourceUrl = options.sourceUrl === undefined ? grid.sourceUrl : options.sourceUrl;
                grid.loadi");
            WriteLiteral(@"ngDelay = options.loadingDelay === undefined ? grid.loadingDelay : options.loadingDelay;

                if (grid.sourceUrl) {
                    var urlsParts = grid.sourceUrl.split('?', 2);
                    grid.sourceUrl = urlsParts[0];

                    if (options.query !== undefined) {
                        grid.query = new MvcGridQuery(options.query);
                    } else if (urlsParts[1] || !grid.query) {
                        grid.query = new MvcGridQuery(urlsParts[1]);
                    }
                } else if (options.query !== undefined) {
                    grid.query = new MvcGridQuery(options.query);
                } else {
                    grid.query = new MvcGridQuery(window.location.search);
                }

                return this;
            },

            reload: function () {
                var grid = this;

                grid.dispatchEvent('reloadstart', { grid: grid });

                if (grid.sourceUrl) {
            ");
            WriteLiteral(@"        grid.startLoading(function (result) {
                        var i = -1;
                        var parent = grid.element.parentElement;
                        while (parent.children[++i] != grid.element);

                        grid.element.outerHTML = result;

                        if (!parent.children[i].classList.contains('mvc-grid')) {
                            throw new Error('Grid partial should only include grid declaration.');
                        }

                        var newGrid = new MvcGrid(parent.children[i], {
                            loadingDelay: grid.loadingDelay,
                            requestType: grid.requestType,
                            query: grid.query.toString(),
                            id: grid.element.dataset.id,
                            sourceUrl: grid.sourceUrl,
                            filters: grid.filters
                        });

                        newGrid.dispatchEvent('reloadend', { grid: newGrid });");
            WriteLiteral(@"
                    }, function (result) {
                        grid.dispatchEvent('reloadfail', { grid: grid, result: result });
                    });
                } else {
                    window.location.href = window.location.origin + window.location.pathname + grid.query;
                }
            },
            startLoading: function (success, error) {
                var grid = this;
                var query = (grid.query.toString() ? grid.query + '&' : '?') + '_=' + Date.now();

                grid.stopLoading();
                if (grid.loadingDelay != null && !grid.element.querySelector('.mvc-grid-loader')) {
                    var content = document.createElement('div');
                    content.appendChild(document.createElement('div'));
                    content.appendChild(document.createElement('div'));
                    content.appendChild(document.createElement('div'));

                    grid.loader = document.createElement('div');
             ");
            WriteLiteral(@"       grid.loader.className = 'mvc-grid-loader';
                    grid.loader.appendChild(content);

                    grid.loading = setTimeout(function () {
                        grid.loader.classList.add('mvc-grid-loading');
                    }, grid.loadingDelay);

                    grid.element.appendChild(grid.loader);
                }

                grid.request = new XMLHttpRequest();
                grid.request.open(grid.requestType, grid.sourceUrl + query, true);
                grid.request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

                grid.request.onload = function () {
                    if (200 <= grid.request.status && grid.request.status < 400) {
                        success(grid.request.responseText);
                    } else if (error) {
                        error(grid.request.responseText);
                    }
                };

                grid.request.onerror = error;

                grid.request.send();
");
            WriteLiteral(@"            },
            stopLoading: function () {
                var grid = this;

                if (grid.request && grid.request.readyState != 4) {
                    grid.request.abort();
                }

                clearTimeout(grid.loading);

                if (grid.loader) {
                    grid.loader.parentElement.removeChild(grid.loader);
                }
            },

            dispatchEvent: function (type, detail) {
                var typedEvent;
                if (typeof (Event) === 'function') {
                    typedEvent = new CustomEvent(type, {
                        detail: detail,
                        bubbles: true
                    });
                } else {
                    typedEvent = document.createEvent('Event');
                    typedEvent.initEvent(type, true, true);
                    typedEvent.detail = detail;
                }

                this.element.dispatchEvent(typedEvent);
            },
       ");
            WriteLiteral(@"     bind: function () {
                var grid = this;

                [].forEach.call(grid.element.querySelectorAll('tbody tr'), function (row) {
                    if (!row.classList.contains('mvc-grid-empty-row')) {
                        row.addEventListener('click', function (e) {
                            var data = {};

                            grid.columns.forEach(function (column, i) {
                                data[column.name] = row.cells[i].innerText;
                            });

                            var typedEvent;
                            var detail = { grid: grid, data: data, originalEvent: e };
                            if (typeof (Event) === 'function') {
                                typedEvent = new CustomEvent('rowclick', {
                                    detail: detail,
                                    bubbles: true
                                });
                            } else {
                                typedEve");
            WriteLiteral(@"nt = document.createEvent('Event');
                                typedEvent.initEvent('rowclick', true, true);
                                typedEvent.detail = detail;
                            }

                            this.dispatchEvent(typedEvent);
                        });
                    }
                });
            },

            cleanUp: function () {
                delete this.element.dataset.sourceUrl;
                delete this.element.dataset.filterMode;
            }
        };

        return MvcGrid;
    })();

    var MvcGridColumn = (function () {
        function MvcGridColumn(grid, header, rowFilter) {
            var column = this;
            var data = header.dataset;

            column.grid = grid;
            column.header = header;
            column.name = data.name;
            column.rowFilter = rowFilter;

            if (data.filter == 'True') {
                var options = header.querySelector('.mvc-grid-options');
    ");
            WriteLiteral(@"            if (options) {
                    options.parentElement.removeChild(options);
                } else if (grid.filterMode == 'FilterRow') {
                    options = rowFilter.querySelector('select.mvc-grid-value');
                }

                column.filter = {
                    isApplied: data.filterFirstMethod != '' || data.filterSecondMethod != '',
                    hasOptions: options && options.children.length > 0,
                    defaultMethod: data.filterDefaultMethod,
                    isMulti: data.filterMulti == 'True',
                    operator: data.filterOperator,
                    name: data.filterName,
                    options: options,
                    first: {
                        method: data.filterFirstMethod,
                        value: data.filterFirstValue
                    },
                    second: {
                        method: data.filterSecondMethod,
                        value: data.filterSecondValue
");
            WriteLiteral(@"                    }
                };
            }

            if (data.sort == 'True' && grid.filterMode != 'HeaderRow') {
                column.sort = {
                    first: data.sortFirst,
                    order: data.sortOrder
                };
            }

            column.bindFilter();
            column.bindSort();
            column.cleanUp();
        }

        MvcGridColumn.prototype = {
            cancelFilter: function () {
                if (this.filter.isApplied) {
                    var grid = this.grid;

                    grid.query.delete(grid.prefix + 'page');
                    grid.query.delete(grid.prefix + 'rows');
                    grid.query.deleteStartingWith(grid.prefix + this.name + '-');

                    grid.reload();
                } else {
                    this.filter.first.value = '';
                    this.filter.second.value = '';
                }
            },
            applyFilter: function () {
     ");
            WriteLiteral(@"           var column = this;
                var grid = column.grid;
                var filter = column.filter;

                grid.query.delete(grid.prefix + 'page');
                grid.query.delete(grid.prefix + 'rows');
                grid.query.deleteStartingWith(grid.prefix + column.name + '-');

                grid.query.append(grid.prefix + column.name + '-' + filter.first.method, filter.first.value);
                if (grid.filterMode == 'ExcelRow' && filter.isMulti) {
                    grid.query.append(grid.prefix + column.name + '-op', filter.operator);
                    grid.query.append(grid.prefix + column.name + '-' + filter.second.method, filter.second.value);
                }

                if (grid.pager && grid.pager.showPageSizes) {
                    grid.query.append(grid.prefix + 'rows', grid.pager.rowsPerPage.value);
                }

                grid.reload();
            },
            applySort: function () {
                var column = th");
            WriteLiteral(@"is;
                var grid = this.grid;

                grid.query.delete(grid.prefix + 'sort');
                grid.query.delete(grid.prefix + 'order');

                var order = column.sort.order == 'asc' ? 'desc' : 'asc';
                if (!column.sort.order && column.sort.first) {
                    order = column.sort.first;
                }

                grid.query.append(grid.prefix + 'sort', column.name);
                grid.query.append(grid.prefix + 'order', order);

                grid.reload();
            },

            bindFilter: function () {
                var column = this;

                if (column.filter) {
                    var filter = (column.rowFilter || column.header).querySelector('.mvc-grid-filter');
                    filter.addEventListener('click', function () {
                        column.filter.instance.show();
                    });

                    if (column.filter.hasOptions) {
                        if (column.grid");
            WriteLiteral(@".filterMode == 'FilterRow') {
                            column.rowFilter.querySelector('select').addEventListener('change', function () {
                                column.filter.first.value = this.value;

                                column.filter.instance.apply();
                            });
                        } else if (column.grid.filterMode == 'HeaderRow') {
                            var value = column.rowFilter.querySelector('.mvc-grid-value');
                            value.readOnly = true;
                            value.tabIndex = -1;
                        }
                    } else if (column.grid.filterMode != 'ExcelRow') {
                        var input = column.rowFilter.querySelector('.mvc-grid-value');

                        input.addEventListener('input', function () {
                            column.filter.first.value = this.value;

                            column.filter.instance.validate(this);
                        });

        ");
            WriteLiteral(@"                input.addEventListener('keyup', function (e) {
                            if (e.which == 13 && column.filter.instance.isValid(this.value)) {
                                column.filter.instance.apply();
                            }
                        });
                    }
                }
            },
            bindSort: function () {
                var column = this;

                if (column.sort) {
                    column.header.addEventListener('click', function (e) {
                        if (!e.target.classList.contains('mvc-grid-filter')) {
                            column.applySort();
                        }
                    });
                }
            },

            cleanUp: function () {
                var data = this.header.dataset;

                delete data.filterDefaultMethod;
                delete data.filterSecondMethod;
                delete data.filterSecondValue;
                delete data.filterFirstMet");
            WriteLiteral(@"hod;
                delete data.filterFirstValue;
                delete data.filterOperator;
                delete data.filterMulti;
                delete data.filterName;
                delete data.filter;

                delete data.sortOrder;
                delete data.sortFirst;
                delete data.sort;

                delete data.name;
            }
        };

        return MvcGridColumn;
    })();

    var MvcGridPager = (function () {
        function MvcGridPager(grid, element) {
            var pager = this;

            pager.grid = grid;
            pager.element = element;
            pager.pages = element.querySelectorAll('[data-page]');
            pager.showPageSizes = element.dataset.showPageSizes == 'True';
            pager.rowsPerPage = element.querySelector('.mvc-grid-pager-rows');
            pager.currentPage = pager.pages.length ? parseInt(element.querySelector('.active').dataset.page) : 1;

            pager.cleanUp();
            pager.");
            WriteLiteral(@"bind();
        }

        MvcGridPager.prototype = {
            apply: function (page) {
                var grid = this.grid;

                grid.query.delete(grid.prefix + 'page');
                grid.query.delete(grid.prefix + 'rows');

                grid.query.append(grid.prefix + 'page', page);

                if (this.showPageSizes) {
                    grid.query.append(grid.prefix + 'rows', this.rowsPerPage.value);
                }

                grid.reload();
            },

            bind: function () {
                var pager = this;

                [].forEach.call(pager.pages, function (page) {
                    page.addEventListener('click', function () {
                        pager.apply(this.dataset.page);
                    });
                });

                pager.rowsPerPage.addEventListener('change', function () {
                    pager.apply(pager.currentPage);
                });
            },

            cleanUp: function ");
            WriteLiteral(@"() {
                delete this.element.dataset.showPageSizes;
            }
        };

        return MvcGridPager;
    })();

    var MvcGridPopup = (function () {
        function MvcGridPopup(grid) {
            this.element.className = 'mvc-grid-popup';
            this.grid = grid;

            this.bind();
        }

        MvcGridPopup.prototype = {
            lastActiveElement: null,
            element: document.createElement('div'),

            render: function (filter) {
                this.element.className = ('mvc-grid-popup ' + filter.cssClasses).trim();
                this.element.innerHTML = filter.render();

                this.updateValues(filter.column);
            },
            updatePosition: function (column) {
                var filter = (column.rowFilter || column.header).querySelector('.mvc-grid-filter');
                var arrow = this.element.querySelector('.popup-arrow');
                var filterPos = filter.getBoundingClientRect();
    ");
            WriteLiteral(@"            var width = this.element.clientWidth;

                var top = window.pageYOffset + filterPos.top + filter.offsetHeight * 0.6 + arrow.offsetHeight;
                var left = window.pageXOffset + filterPos.left - 8;
                var arrowLeft = filter.offsetWidth / 2;

                if (left + width + 8 > window.pageXOffset + document.documentElement.clientWidth) {
                    var offset = width - filter.offsetWidth - 16;
                    arrowLeft += offset;
                    left -= offset;
                }

                this.element.style.left = left + 'px';
                this.element.style.top = top + 'px';
                arrow.style.left = arrowLeft + 'px';
            },
            updateValues: function (column) {
                var filter = column.filter;

                this.updateValue('.mvc-grid-operator', filter.operator);
                this.updateValue('.mvc-grid-value[data-filter=""first""]', filter.first.value);
                this");
            WriteLiteral(@".updateValue('.mvc-grid-value[data-filter=""second""]', filter.second.value);
                this.updateValue('.mvc-grid-method[data-filter=""first""]', filter.first.method);
                this.updateValue('.mvc-grid-method[data-filter=""second""]', filter.second.method);
            },
            updateValue: function (selector, value) {
                var input = this.element.querySelector(selector);

                if (input) {
                    input.value = value;
                }
            },

            show: function (column) {
                MvcGridPopup.prototype.lastActiveElement = document.activeElement;

                if (!this.element.parentElement) {
                    document.body.appendChild(this.element);
                }

                this.updatePosition(column);

                this.element.querySelector('input,select,textarea').focus();
            },
            hide: function (e) {
                var target = e && e.target;

                whi");
            WriteLiteral(@"le (target && !/mvc-grid-(popup|filter)/.test(target.className)) {
                    target = target.parentElement;
                }

                var popup = MvcGridPopup.prototype;
                if ((!target || e.which == 27) && popup.element.parentNode) {
                    document.body.removeChild(popup.element);

                    if (popup.lastActiveElement) {
                        popup.lastActiveElement.focus();
                        popup.lastActiveElement = null;
                    }
                }
            },

            bind: function () {
                window.addEventListener('click', this.hide);
                window.addEventListener('resize', this.hide);
                window.addEventListener('keydown', this.hide);
            }
        };

        return MvcGridPopup;
    })();

    var MvcGridQuery = (function () {
        function MvcGridQuery(value) {
            this.query = (value || '').replace('?', '');
        }

        MvcGrid");
            WriteLiteral(@"Query.prototype = {
            set: function (name, value) {
                this.delete(name);
                this.append(name, value);
            },

            append: function (name, value) {
                this.query += this.query ? '&' : '';
                this.query += encodeURIComponent(name) + '=' + encodeURIComponent(value || '');
            },
            delete: function (name) {
                name = encodeURIComponent(name);

                this.query = this.query.split('&').filter(function (parameter) {
                    return parameter.split('=', 1)[0] != name;
                }).join('&');
            },
            deleteStartingWith: function (name) {
                name = encodeURIComponent(name);

                this.query = this.query.split('&').filter(function (parameter) {
                    return parameter.split('=', 1)[0].indexOf(name);
                }).join('&');
            },

            toString: function () {
                return th");
            WriteLiteral(@"is.query ? '?' + this.query : '';
            }
        };

        return MvcGridQuery;
    })();

    function MvcGridExtends(subclass, base) {
        Object.setPrototypeOf(subclass, base);

        function Subclass() {
            this.constructor = subclass;
        }

        subclass.prototype = (Subclass.prototype = base.prototype, new Subclass());
    }

    var MvcGridFilter = (function () {
        function MvcGridFilter(column) {
            this.isMulti = column.filter.isMulti;
            this.mode = column.grid.filterMode;
            this.popup = column.grid.popup;
            this.cssClasses = '';
            this.column = column;
            this.methods = [];
        }

        MvcGridFilter.prototype = {
            init: function () {
                var filter = this;
                var column = filter.column;

                if (!column.filter.hasOptions && filter.mode != 'ExcelRow') {
                    filter.validate(column.rowFilter.querySelector");
            WriteLiteral(@"('.mvc-grid-value'));
                }

                if (filter.methods.indexOf(column.filter.first.method) < 0) {
                    column.filter.first.method = column.filter.defaultMethod || filter.methods[0];
                }

                if (filter.methods.indexOf(column.filter.second.method) < 0) {
                    column.filter.second.method = column.filter.defaultMethod || filter.methods[0];
                }
            },

            show: function () {
                var filter = this;

                filter.popup.render(filter);

                filter.bindOperator();
                filter.bindMethods();
                filter.bindValues();
                filter.bindActions();

                filter.popup.show(filter.column);
            },

            render: function () {
                this.lang = this.column.grid.lang;

                return '<div class=""popup-arrow""></div>' +
                    '<div class=""popup-content"">' +
              ");
            WriteLiteral(@"      '<div class=""popup-filter"">' +
                    this.renderFilter('first') +
                    '</div>' +
                    (this.mode == 'ExcelRow' && this.isMulti
                        ? this.renderOperator() +
                        '<div class=""popup-filter"">' +
                        this.renderFilter('second') +
                        '</div>'
                        : '') +
                    this.renderActions() +
                    '</div>';
            },
            renderFilter: function (name) {
                var hasOptions = this.column.filter.hasOptions;
                var lang = this.lang[this.column.filter.name] || {};

                return '<div class=""popup-group"">' +
                    '<select class=""mvc-grid-method"" data-filter=""' + name + '"">' +
                    this.methods.map(function (method) {
                        return '<option value=""' + method + '"">' + (lang[method] || '') + '</option>';
                    }).join('') +
    ");
            WriteLiteral(@"                '</select>' +
                    '</div>' +
                    '<div class=""popup-group"">' + (hasOptions
                        ? '<select class=""mvc-grid-value"" data-filter=""' + name + '"">' +
                        this.column.filter.options.innerHTML +
                        '</select>'
                        : '<input class=""mvc-grid-value"" data-filter=""' + name + '"">') +
                    '</div>';
            },
            renderOperator: function () {
                return '<div class=""popup-operator"">' +
                    '<div class=""popup-group"">' +
                    '<select class=""mvc-grid-operator"">' +
                    '<option value="""">' + this.lang.operator.select + '</option>' +
                    '<option value=""and"">' + this.lang.operator.and + '</option>' +
                    '<option value=""or"">' + this.lang.operator.or + '</option>' +
                    '</select>' +
                    '</div>' +
                    '</div>';
        ");
            WriteLiteral(@"    },
            renderActions: function () {
                return '<div class=""popup-actions"">' +
                    '<button type=""button"" class=""mvc-grid-apply"" type=""button"">' + this.lang.filter.apply + '</button>' +
                    '<button type=""button"" class=""mvc-grid-cancel"" type=""button"">' + this.lang.filter.remove + '</button>' +
                    '</div>';
            },

            apply: function () {
                MvcGridPopup.prototype.lastActiveElement = null;

                this.column.applyFilter();

                this.popup.hide();
            },
            cancel: function () {
                if (this.column.filter.isApplied) {
                    MvcGridPopup.prototype.lastActiveElement = null;
                }

                this.column.cancelFilter();

                this.popup.hide();
            },
            isValid: function () {
                return true;
            },
            validate: function (input) {
                i");
            WriteLiteral(@"f (this.isValid(input.value)) {
                    input.classList.remove('invalid');
                } else {
                    input.classList.add('invalid');
                }
            },

            bindOperator: function () {
                var filter = this.column.filter;
                var operator = this.popup.element.querySelector('.mvc-grid-operator');

                if (operator) {
                    operator.addEventListener('change', function () {
                        filter.operator = this.value;
                    });
                }
            },
            bindMethods: function () {
                var filter = this.column.filter;

                [].forEach.call(this.popup.element.querySelectorAll('.mvc-grid-method'), function (method) {
                    method.addEventListener('change', function () {
                        filter[this.dataset.filter].method = this.value;
                    });
                });
            },
            ");
            WriteLiteral(@"bindValues: function () {
                var filter = this;

                [].forEach.call(filter.popup.element.querySelectorAll('.mvc-grid-value'), function (input) {
                    input.addEventListener('input', function () {
                        filter.column.filter[this.dataset.filter].value = this.value;

                        if (filter.mode != 'ExcelRow') {
                            var rowInput = filter.column.rowFilter.querySelector('.mvc-grid-value');
                            if (this.tagName == 'SELECT') {
                                rowInput.value = this.options[this.selectedIndex].text;
                            } else {
                                rowInput.value = this.value;
                            }

                            filter.validate(rowInput);
                        }

                        filter.validate(this);
                    });

                    input.addEventListener('keyup', function (e) {
                      ");
            WriteLiteral(@"  if (e.which == 13 && filter.isValid(this.value)) {
                            filter.apply();
                        }
                    });

                    filter.validate(input);
                });
            },
            bindActions: function () {
                var popup = this.popup.element;

                popup.querySelector('.mvc-grid-apply').addEventListener('click', this.apply.bind(this));
                popup.querySelector('.mvc-grid-cancel').addEventListener('click', this.cancel.bind(this));
            }
        };

        return MvcGridFilter;
    })();

    var MvcGridTextFilter = (function (base) {
        MvcGridExtends(MvcGridTextFilter, base);

        function MvcGridTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains', 'equals', 'not-equals', 'starts-with', 'ends-with'];
        }

        return MvcGridTextFilter;
    })(MvcGridFilter);

    var MvcGridNumberFilter = (function (base) {
       ");
            WriteLiteral(@" MvcGridExtends(MvcGridNumberFilter, base);

        function MvcGridNumberFilter(column) {
            base.call(this, column);

            this.methods = ['equals', 'not-equals', 'less-than', 'greater-than', 'less-than-or-equal', 'greater-than-or-equal'];
        }

        MvcGridNumberFilter.prototype.isValid = function (value) {
            return !value || /^(?=.*\d+.*)[-+]?\d*[.,]?\d*$/.test(value);
        };

        return MvcGridNumberFilter;
    })(MvcGridFilter);

    var MvcGridDateFilter = (function (base) {
        MvcGridExtends(MvcGridDateFilter, base);

        function MvcGridDateFilter(column) {
            base.call(this, column);

            this.methods = ['equals', 'not-equals', 'earlier-than', 'later-than', 'earlier-than-or-equal', 'later-than-or-equal'];
        }

        return MvcGridDateFilter;
    })(MvcGridFilter);

    var MvcGridEnumFilter = (function (base) {
        MvcGridExtends(MvcGridEnumFilter, base);

        function MvcGridEnumFilter");
            WriteLiteral(@"(column) {
            base.call(this, column);

            this.methods = ['equals', 'not-equals'];
        }

        return MvcGridEnumFilter;
    })(MvcGridFilter);

    var MvcGridGuidFilter = (function (base) {
        MvcGridExtends(MvcGridGuidFilter, base);

        function MvcGridGuidFilter(column) {
            base.call(this, column);

            this.methods = ['equals', 'not-equals'];
            this.cssClasses = 'mvc-grid-guid-filter';
        }

        MvcGridGuidFilter.prototype.isValid = function (value) {
            return !value || /^[0-9A-F]{8}[-]?([0-9A-F]{4}[-]?){3}[0-9A-F]{12}$/i.test(value);
        };

        return MvcGridGuidFilter;
    })(MvcGridFilter);

    var MvcGridBooleanFilter = (function (base) {
        MvcGridExtends(MvcGridBooleanFilter, base);

        function MvcGridBooleanFilter(column) {
            base.call(this, column);

            this.methods = ['equals', 'not-equals'];
        }

        return MvcGridBooleanFilter;");
            WriteLiteral("\n    })(MvcGridFilter);\r\n\r\n</script>\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
